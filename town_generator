from random import randint
import os

TOWN_SYMBOL = '#'
ROAD_SYMBOL = '-'
class Town:
    def __init__(self, name, location, world_map):
        self.name = name
        self.location = location
        self.has_road = False
        self.connected_to = [object]
        self.world_map = world_map
        world_map.world_map[location[0]][location[1]] = TOWN_SYMBOL


class World_Map:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.world_map = [[' ' for i in range(width)]for i in range(height)]
        self.town_symbol = TOWN_SYMBOL # Used to represent a 'Town' when world_map is displayed
        self.road_symbol = ROAD_SYMBOL
        self.towns = []

    def display(self): # Displays map on screen
        for i in self.world_map:
            print(' '.join(i))

    def get(self, location):
        return self.world_map[location[1]][location[0]]

    def place_towns(self, number_of_towns, padding): # Represented by '#' in world_map

        for i in range(number_of_towns):

            while 1:
                # Generate Random Integers (potential 'Town' location)
                x = randint(0,self.width - 1)
                y = randint(0,self.height - 1)

                # Creates blank list to fill with the current valid neighbor locations
                neighbors = []

                # Checks all possible combos of positive and negative x and y values (i.e. all neighboring locations around a 9x9 square radius from the current point)
                for a in range(-padding, padding + 1):      # x axis
                    for b in range(-padding, padding + 1):    # y axis
                        # Prevents errors when attempting to check nonexistent locations around edge/corner points
                        try:
                            neighbors.append(self.world_map[y+a][x+b])
                        except:
                            pass

                if self.town_symbol in neighbors:
                    pass
                else:
                    T = Town('name', (y,x), self) # Stored as (Y,X) instead of X,Y
                    self.towns.append(T)
                    break
        
    def place_roads(self):
        # Sorts list of town x,y values (location), effectively 'grouping neighbors'
        locs = []
        for i in self.towns:
            locs.append(i.location)
        locs = sorted(locs)
        
        for i in range(len(locs)-1):
            start = locs[i]
            end = locs[i + 1]
          
            x = start[1]
            y = start[0]
            
            while y < end[0]-1:
                if y > end[0]-1:
                    y -= 1
                else:
                    y += 1
                if self.world_map[y][x] != self.town_symbol:
                        self.world_map[y][x] = self.road_symbol
            while x != end[1]:
                if x > end[1]:
                    x -= 1
                else:
                    x += 1
            
                if self.world_map[y][x] != self.town_symbol:
                    try:
                        if self.world_map[y+1][x] and self.world_map[y-1][x] != self.road_symbol:
                            self.world_map[y][x] = self.road_symbol
                    except: pass

def clear_screen():
    os.system('clear_screen' if os.name=='nt' else 'clear') 

while 1:
    user_input = input('''
    1: Generate world and preview.
    2: Select world and begin.
    3: Load Game
    
    Selection: ''')
    if user_input == '1':
        clear_screen()
        M = World_Map(64,32) # Make 'World Map'
        M.place_towns(24, 1) # Make 'Towns'
        M.place_roads() # Make 'Roads'
        M.display() # Show map
